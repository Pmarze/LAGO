  /**
    * @file font.h
    * @version 1.1
    * @date 16/12/2021
    * @author Pablo M. Zece√±a
    * @brief Library to display characters into the LCD and operational parameters of the SSD1306. 
    * Each character to be displayed on the screen is declared individually as a function. 
    * This library is based on some functions of the SSD1306/lib/font.c repository, created by Marian Hrinko "https://github.com/Matiasus/SSD1306"
    * @code
      // Each character must be written using hexadecimal numbers 
      // sent one by one as shown in the example below
      void DEMO(int fd){
          i2c_smbus_write_byte_data(fd, SET_START_LINE, 0x);
          i2c_smbus_write_byte_data(fd, SET_START_LINE, 0x);
          i2c_smbus_write_byte_data(fd, SET_START_LINE, 0x);
          i2c_smbus_write_byte_data(fd, SET_START_LINE, 0x);
          i2c_smbus_write_byte_data(fd, SET_START_LINE, 0x);  
          i2c_smbus_write_byte_data(fd, SET_START_LINE, 0x00);  
      }
    * @endcode    
    *
    * @code 
      int main(int argc, char **argv){
	    fun_inic_disp();
	    if(bmp != NULL){
          fun_character(fd,H_M);
          fun_character(fd,e_MI);
          fun_character(fd,l_MI);
          fun_character(fd,l_MI);
          fun_character(fd,o_MI);
          fun_character(fd,space);
          fun_character(fd,W_M);
          fun_character(fd,o_MI);
          fun_character(fd,r_MI);
          fun_character(fd,l_MI);
          fun_character(fd,d_MI);
	    }
	    fun_close_disp(bmp,fd);

	    return 0;
      }
      // The LCD Show: 
      // Hello World
    * @endcode  
    */
#ifndef FONT_H_
#define FONT_H_

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <linux/ioctl.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdint.h>

#define PAGESIZE        32

////////////////////////////////////////////////////////////////////////////////
// Command definition

#define SET_MUX_RATIO       0xA8
  /**
    * @brief Display offset
    */
#define SET_DISP_OFFSET     0xD3
#define DISPLAY_ON          0xAF
#define DISPLAY_OFF         0xAE
  /**
    * @brief Entire display on
    */
#define SET_ENTIRE_ON       0xA4
  /**
    * @brief Display ignore RAM
    */
#define DISPLAY_IGN_RAM     0xA5
  /**
    * @brief Display normal
    */
#define DISPLAY_NORMAL      0xA6
  /**
    * @brief Display inverse
    */
#define DISPLAY_INVERSE     0xA7
  /**
    * @brief Desactivate scroll
    */
#define DEACT_SCROLL        0x2E
#define ACTIVE_SCROLL       0x2F
  /**
    * @brief Set display start line
    */  
#define SET_START_LINE      0x40
  /**
    * @brief Set memory address
    */
#define MEMORY_ADDR_MODE    0x20
  /**
    * @brief  Set column addres
    */
#define SET_COLUMN_ADDR     0x21
  /**
    * @brief Set page address
    */
#define SET_PAGE_ADDR       0x22
  /**
    * @brief Set segment remap (column address 0 is mapped to SEG0 (RESET))
    */
#define SET_SEG_REMAP       0xA0
  /**
    * @brief Set segment remap (column address 127 is mapped to SEG0)
    */
#define SET_SEG_REMAP_OP    0xA1  
  /**
    * @brief Set COM output scan direction (normal mode (RESET) Scan from COM0 to COM[N-1])
    */
#define COM_SCAN_DIR        0xC0
  /**
    * @brief Set COM output scan direction (remapped mode. Scan from COM[N-1] to COM0)
    */
#define COM_SCAN_DIR_OP     0xC8
  /**
    * @brief Set COM pins Hardware configuration
    */
#define SET_COM_PIN_CFG     0xDA
  /**
    * @brief Set constrast control
    */ 
#define SET_CONTRAST        0x81
#define SET_OSC_FREQ        0xD5
  /**
    * @brief Charge pump setting
    */
#define SET_CHAR_REG        0x8D
  /**
    * @brief Set pre-charge Period
    */
#define SET_PRECHARGE       0xD9
  /**
    * @brief Set VcomH deselect level
    */
#define SET_VCOM_DESEL      0xDB

#define INIT_STATUS         0xFF

////////////////////////////////////////////////////////////////////////////////

uint8_t colon[5]    = {0x00,0x00,0x36,0x36,0x00};
uint8_t asterisk[5] = {0x14,0x08,0x3E,0x08,0x14};
uint8_t equal[5]    = {0x00,0x14,0x14,0x14,0x14};
uint8_t dot[5]      = {0X00,0x00,0x60,0x60,0x00};
uint8_t space[5]    = {0x00,0x00,0x00,0x00,0x00};

uint8_t capital[26][5] = {
    {0x7E,0x11,0x11,0x11,0x7E},
    {0x7F,0x49,0x49,0x49,0x36},
    {0x3E,0x41,0x41,0x41,0x22},
    {0x7F,0x41,0x22,0x22,0x1C},
    {0x7F,0x49,0x49,0x49,0x41},
    {0x7F,0x09,0x09,0x09,0x01},
    {0x3E,0x41,0x49,0x49,0x7A},
    {0x7F,0x08,0x08,0x08,0x7F},
    {0x00,0x41,0x7F,0x41,0x00},
    {0x20,0x40,0x41,0x3F,0x01},
    {0x7F,0x08,0x14,0x22,0x41},
    {0x7F,0x40,0x40,0x40,0x40},
    {0x7F,0x02,0x0C,0x02,0x7F},
    {0x7F,0x04,0x08,0x10,0x7F},
    {0x3E,0x41,0x41,0x41,0x3E},
    {0x7F,0x09,0x09,0x09,0x06},
    {0x3E,0x41,0x51,0x21,0x5E},
    {0x7F,0x09,0x19,0x29,0x46},
    {0x46,0x49,0x49,0x49,0x31},
    {0x01,0x01,0x7F,0x01,0x01},
    {0x3F,0x40,0x40,0x40,0x3F},
    {0x1F,0x20,0x40,0x20,0x1F},
    {0x3F,0x40,0x38,0x40,0x3F},
    {0x63,0x14,0x08,0x14,0x63},
    {0x07,0x08,0x70,0x08,0x07},
    {0x61,0x51,0x49,0x45,0x43}
};

uint8_t lowercase[26][5] = {
    {0x20,0x54,0x54,0x54,0x78},
    {0x7F,0x48,0x44,0x44,0x38},
    {0x38,0x44,0x44,0x44,0x20},
    {0x38,0x44,0x44,0x48,0x7F},
    {0x38,0x54,0x54,0x54,0x18},
    {0x08,0x7E,0x09,0x01,0x02},
    {0x0C,0x52,0x52,0x52,0x3E},
    {0x7F,0x08,0x04,0x04,0x78},
    {0x00,0x44,0x7D,0x40,0x00},
    {0x20,0x40,0x44,0x3D,0x00},
    {0x7F,0x10,0x28,0x44,0x00},
    {0x00,0x41,0x7F,0x40,0x00},
    {0x7C,0x08,0x18,0x04,0x78},
    {0x7C,0x08,0x04,0x04,0x78},
    {0x38,0x44,0x44,0x44,0x38},
    {0x7C,0x14,0x14,0x14,0x08},
    {0x08,0x14,0x14,0x14,0x7C},
    {0x7C,0x08,0x04,0x04,0x08},
    {0x48,0x54,0x54,0x54,0x20},
    {0x04,0x3F,0x44,0x40,0x20},
    {0x3C,0x40,0x40,0x20,0x7C},
    {0x1C,0x20,0x40,0x20,0x1C},
    {0x3C,0x40,0x30,0x40,0x3C},
    {0x44,0x28,0x10,0x28,0x44},
    {0x0C,0x50,0x50,0x50,0x3C},
    {0x44,0x64,0x54,0x4C,0x44}
};

uint8_t numbers[15][5] = {
    {0x3E,0x51,0x49,0x45,0x3E},
    {0x00,0x42,0x7F,0x40,0x00},
    {0x42,0x61,0x51,0x49,0x46},
    {0x21,0x41,0x45,0x4B,0x31},
    {0x18,0x14,0x12,0x7F,0x10},
    {0x27,0x45,0x45,0x45,0x39},
    {0x3C,0x4A,0x49,0x49,0x30},
    {0x01,0x71,0x09,0x05,0x03},
    {0x36,0x49,0x49,0x49,0x36},
    {0x06,0x49,0x49,0x29,0x1E},
    {0x00,0x00,0x00,0x00,0x00},  // space
    {0x00,0x00,0x36,0x36,0x00}, // colon 
    {0x14,0x08,0x3E,0x08,0x14}, // asterisk
    {0x00,0x14,0x14,0x14,0x14}, // equal
    {0X00,0x00,0x60,0x60,0x00} // dot
    
};
#endif /* FONT_H_ */